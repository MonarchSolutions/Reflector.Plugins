using System;
using System.Collections;
using System.Globalization;
using System.Reflection;
using System.Reflection.Emit;
// ReSharper disable StringLiteralTypo

namespace Reflector.Emit.CodeModel
{
	internal class InstructionHelper
	{
		public static string GetOpCodeFieldName(int code)
		{
			if (codes == null)
			{
				codes = new Hashtable();
				Type typeFromHandle = typeof(OpCodes);
				foreach (FieldInfo fieldInfo in typeFromHandle.GetFields())
				{
					if (fieldInfo.FieldType == typeof(OpCode))
					{
						OpCode opCode = (OpCode)fieldInfo.GetValue(null);
						codes.Add(opCode.Value, fieldInfo.Name);
					}
				}
			}
			return (string)codes[(short)code];
		}

		public static OperandType GetOperandType(int code)
		{
			switch (code)
			{
			case 0:
				return OperandType.None;
			case 1:
				return OperandType.None;
			case 2:
				return OperandType.None;
			case 3:
				return OperandType.None;
			case 4:
				return OperandType.None;
			case 5:
				return OperandType.None;
			case 6:
				return OperandType.None;
			case 7:
				return OperandType.None;
			case 8:
				return OperandType.None;
			case 9:
				return OperandType.None;
			case 10:
				return OperandType.None;
			case 11:
				return OperandType.None;
			case 12:
				return OperandType.None;
			case 13:
				return OperandType.None;
			case 14:
				return OperandType.ShortVariable;
			case 15:
				return OperandType.ShortVariable;
			case 16:
				return OperandType.ShortVariable;
			case 17:
				return OperandType.ShortVariable;
			case 18:
				return OperandType.ShortVariable;
			case 19:
				return OperandType.ShortVariable;
			case 20:
				return OperandType.None;
			case 21:
				return OperandType.None;
			case 22:
				return OperandType.None;
			case 23:
				return OperandType.None;
			case 24:
				return OperandType.None;
			case 25:
				return OperandType.None;
			case 26:
				return OperandType.None;
			case 27:
				return OperandType.None;
			case 28:
				return OperandType.None;
			case 29:
				return OperandType.None;
			case 30:
				return OperandType.None;
			case 31:
				return OperandType.SByte;
			case 32:
				return OperandType.Int32;
			case 33:
				return OperandType.Int64;
			case 34:
				return OperandType.Single;
			case 35:
				return OperandType.Double;
			case 37:
				return OperandType.None;
			case 38:
				return OperandType.None;
			case 39:
				return OperandType.Method;
			case 40:
				return OperandType.Method;
			case 41:
				return OperandType.Signature;
			case 42:
				return OperandType.None;
			case 43:
				return OperandType.ShortBranchTarget;
			case 44:
				return OperandType.ShortBranchTarget;
			case 45:
				return OperandType.ShortBranchTarget;
			case 46:
				return OperandType.ShortBranchTarget;
			case 47:
				return OperandType.ShortBranchTarget;
			case 48:
				return OperandType.ShortBranchTarget;
			case 49:
				return OperandType.ShortBranchTarget;
			case 50:
				return OperandType.ShortBranchTarget;
			case 51:
				return OperandType.ShortBranchTarget;
			case 52:
				return OperandType.ShortBranchTarget;
			case 53:
				return OperandType.ShortBranchTarget;
			case 54:
				return OperandType.ShortBranchTarget;
			case 55:
				return OperandType.ShortBranchTarget;
			case 56:
				return OperandType.BranchTarget;
			case 57:
				return OperandType.BranchTarget;
			case 58:
				return OperandType.BranchTarget;
			case 59:
				return OperandType.BranchTarget;
			case 60:
				return OperandType.BranchTarget;
			case 61:
				return OperandType.BranchTarget;
			case 62:
				return OperandType.BranchTarget;
			case 63:
				return OperandType.BranchTarget;
			case 64:
				return OperandType.BranchTarget;
			case 65:
				return OperandType.BranchTarget;
			case 66:
				return OperandType.BranchTarget;
			case 67:
				return OperandType.BranchTarget;
			case 68:
				return OperandType.BranchTarget;
			case 69:
				return OperandType.Switch;
			case 70:
				return OperandType.None;
			case 71:
				return OperandType.None;
			case 72:
				return OperandType.None;
			case 73:
				return OperandType.None;
			case 74:
				return OperandType.None;
			case 75:
				return OperandType.None;
			case 76:
				return OperandType.None;
			case 77:
				return OperandType.None;
			case 78:
				return OperandType.None;
			case 79:
				return OperandType.None;
			case 80:
				return OperandType.None;
			case 81:
				return OperandType.None;
			case 82:
				return OperandType.None;
			case 83:
				return OperandType.None;
			case 84:
				return OperandType.None;
			case 85:
				return OperandType.None;
			case 86:
				return OperandType.None;
			case 87:
				return OperandType.None;
			case 88:
				return OperandType.None;
			case 89:
				return OperandType.None;
			case 90:
				return OperandType.None;
			case 91:
				return OperandType.None;
			case 92:
				return OperandType.None;
			case 93:
				return OperandType.None;
			case 94:
				return OperandType.None;
			case 95:
				return OperandType.None;
			case 96:
				return OperandType.None;
			case 97:
				return OperandType.None;
			case 98:
				return OperandType.None;
			case 99:
				return OperandType.None;
			case 100:
				return OperandType.None;
			case 101:
				return OperandType.None;
			case 102:
				return OperandType.None;
			case 103:
				return OperandType.None;
			case 104:
				return OperandType.None;
			case 105:
				return OperandType.None;
			case 106:
				return OperandType.None;
			case 107:
				return OperandType.None;
			case 108:
				return OperandType.None;
			case 109:
				return OperandType.None;
			case 110:
				return OperandType.None;
			case 111:
				return OperandType.Method;
			case 112:
				return OperandType.Type;
			case 113:
				return OperandType.Type;
			case 114:
				return OperandType.String;
			case 115:
				return OperandType.Method;
			case 116:
				return OperandType.Type;
			case 117:
				return OperandType.Type;
			case 118:
				return OperandType.None;
			case 121:
				return OperandType.Type;
			case 122:
				return OperandType.None;
			case 123:
				return OperandType.Field;
			case 124:
				return OperandType.Field;
			case 125:
				return OperandType.Field;
			case 126:
				return OperandType.Field;
			case 127:
				return OperandType.Field;
			case 128:
				return OperandType.Field;
			case 129:
				return OperandType.Type;
			case 130:
				return OperandType.None;
			case 131:
				return OperandType.None;
			case 132:
				return OperandType.None;
			case 133:
				return OperandType.None;
			case 134:
				return OperandType.None;
			case 135:
				return OperandType.None;
			case 136:
				return OperandType.None;
			case 137:
				return OperandType.None;
			case 138:
				return OperandType.None;
			case 139:
				return OperandType.None;
			case 140:
				return OperandType.Type;
			case 141:
				return OperandType.Type;
			case 142:
				return OperandType.None;
			case 143:
				return OperandType.Type;
			case 144:
				return OperandType.None;
			case 145:
				return OperandType.None;
			case 146:
				return OperandType.None;
			case 147:
				return OperandType.None;
			case 148:
				return OperandType.None;
			case 149:
				return OperandType.None;
			case 150:
				return OperandType.None;
			case 151:
				return OperandType.None;
			case 152:
				return OperandType.None;
			case 153:
				return OperandType.None;
			case 154:
				return OperandType.None;
			case 155:
				return OperandType.None;
			case 156:
				return OperandType.None;
			case 157:
				return OperandType.None;
			case 158:
				return OperandType.None;
			case 159:
				return OperandType.None;
			case 160:
				return OperandType.None;
			case 161:
				return OperandType.None;
			case 162:
				return OperandType.None;
			case 163:
				return OperandType.Type;
			case 164:
				return OperandType.Type;
			case 165:
				return OperandType.Type;
			case 179:
				return OperandType.None;
			case 180:
				return OperandType.None;
			case 181:
				return OperandType.None;
			case 182:
				return OperandType.None;
			case 183:
				return OperandType.None;
			case 184:
				return OperandType.None;
			case 185:
				return OperandType.None;
			case 186:
				return OperandType.None;
			case 194:
				return OperandType.Type;
			case 195:
				return OperandType.None;
			case 198:
				return OperandType.Type;
			case 208:
				return OperandType.Token;
			case 209:
				return OperandType.None;
			case 210:
				return OperandType.None;
			case 211:
				return OperandType.None;
			case 212:
				return OperandType.None;
			case 213:
				return OperandType.None;
			case 214:
				return OperandType.None;
			case 215:
				return OperandType.None;
			case 216:
				return OperandType.None;
			case 217:
				return OperandType.None;
			case 218:
				return OperandType.None;
			case 219:
				return OperandType.None;
			case 220:
				return OperandType.None;
			case 221:
				return OperandType.BranchTarget;
			case 222:
				return OperandType.ShortBranchTarget;
			case 223:
				return OperandType.None;
			case 224:
				return OperandType.None;
			case 248:
				return OperandType.None;
			case 249:
				return OperandType.None;
			case 250:
				return OperandType.None;
			case 251:
				return OperandType.None;
			case 252:
				return OperandType.None;
			case 253:
				return OperandType.None;
			case 254:
				return OperandType.None;
			case 255:
				return OperandType.None;
			}
			switch (code)
			{
			case 65024:
				return OperandType.None;
			case 65025:
				return OperandType.None;
			case 65026:
				return OperandType.None;
			case 65027:
				return OperandType.None;
			case 65028:
				return OperandType.None;
			case 65029:
				return OperandType.None;
			case 65030:
				return OperandType.Method;
			case 65031:
				return OperandType.Method;
			case 65033:
				return OperandType.Variable;
			case 65034:
				return OperandType.Variable;
			case 65035:
				return OperandType.Variable;
			case 65036:
				return OperandType.Variable;
			case 65037:
				return OperandType.Variable;
			case 65038:
				return OperandType.Variable;
			case 65039:
				return OperandType.None;
			case 65041:
				return OperandType.None;
			case 65042:
				return OperandType.SByte;
			case 65043:
				return OperandType.None;
			case 65044:
				return OperandType.None;
			case 65045:
				return OperandType.Type;
			case 65046:
				return OperandType.Type;
			case 65047:
				return OperandType.None;
			case 65048:
				return OperandType.None;
			case 65050:
				return OperandType.None;
			case 65052:
				return OperandType.Type;
			case 65053:
				return OperandType.None;
			case 65054:
				return OperandType.None;
			}
			throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture, "Unknown IL instruction '{0}'.", new object[]
			{
				code.ToString("X4", CultureInfo.InvariantCulture)
			}));
		}

		public static string GetInstructionName(int code)
		{
			switch (code)
			{
			case 0:
				return "nop";
			case 1:
				return "break";
			case 2:
				return "ldarg.0";
			case 3:
				return "ldarg.1";
			case 4:
				return "ldarg.2";
			case 5:
				return "ldarg.3";
			case 6:
				return "ldloc.0";
			case 7:
				return "ldloc.1";
			case 8:
				return "ldloc.2";
			case 9:
				return "ldloc.3";
			case 10:
				return "stloc.0";
			case 11:
				return "stloc.1";
			case 12:
				return "stloc.2";
			case 13:
				return "stloc.3";
			case 14:
				return "ldarg.s";
			case 15:
				return "ldarga.s";
			case 16:
				return "starg.s";
			case 17:
				return "ldloc.s";
			case 18:
				return "ldloca.s";
			case 19:
				return "stloc.s";
			case 20:
				return "ldnull";
			case 21:
				return "ldc.i4.m1";
			case 22:
				return "ldc.i4.0";
			case 23:
				return "ldc.i4.1";
			case 24:
				return "ldc.i4.2";
			case 25:
				return "ldc.i4.3";
			case 26:
				return "ldc.i4.4";
			case 27:
				return "ldc.i4.5";
			case 28:
				return "ldc.i4.6";
			case 29:
				return "ldc.i4.7";
			case 30:
				return "ldc.i4.8";
			case 31:
				return "ldc.i4.s";
			case 32:
				return "ldc.i4";
			case 33:
				return "ldc.i8";
			case 34:
				return "ldc.r4";
			case 35:
				return "ldc.r8";
			case 37:
				return "dup";
			case 38:
				return "pop";
			case 39:
				return "jmp";
			case 40:
				return "call";
			case 41:
				return "calli";
			case 42:
				return "ret";
			case 43:
				return "br.s";
			case 44:
				return "brfalse.s";
			case 45:
				return "brtrue.s";
			case 46:
				return "beq.s";
			case 47:
				return "bge.s";
			case 48:
				return "bgt.s";
			case 49:
				return "ble.s";
			case 50:
				return "blt.s";
			case 51:
				return "bne.un.s";
			case 52:
				return "bge.un.s";
			case 53:
				return "bgt.un.s";
			case 54:
				return "ble.un.s";
			case 55:
				return "blt.un.s";
			case 56:
				return "br";
			case 57:
				return "brfalse";
			case 58:
				return "brtrue";
			case 59:
				return "beq";
			case 60:
				return "bge";
			case 61:
				return "bgt";
			case 62:
				return "ble";
			case 63:
				return "blt";
			case 64:
				return "bne.un";
			case 65:
				return "bge.un";
			case 66:
				return "bgt.un";
			case 67:
				return "ble.un";
			case 68:
				return "blt.un";
			case 69:
				return "switch";
			case 70:
				return "ldind.i1";
			case 71:
				return "ldind.u1";
			case 72:
				return "ldind.i2";
			case 73:
				return "ldind.u2";
			case 74:
				return "ldind.i4";
			case 75:
				return "ldind.u4";
			case 76:
				return "ldind.i8";
			case 77:
				return "ldind.i";
			case 78:
				return "ldind.r4";
			case 79:
				return "ldind.r8";
			case 80:
				return "ldind.ref";
			case 81:
				return "stind.ref";
			case 82:
				return "stind.i1";
			case 83:
				return "stind.i2";
			case 84:
				return "stind.i4";
			case 85:
				return "stind.i8";
			case 86:
				return "stind.r4";
			case 87:
				return "stind.r8";
			case 88:
				return "add";
			case 89:
				return "sub";
			case 90:
				return "mul";
			case 91:
				return "div";
			case 92:
				return "div.un";
			case 93:
				return "rem";
			case 94:
				return "rem.un";
			case 95:
				return "and";
			case 96:
				return "or";
			case 97:
				return "xor";
			case 98:
				return "shl";
			case 99:
				return "shr";
			case 100:
				return "shr.un";
			case 101:
				return "neg";
			case 102:
				return "not";
			case 103:
				return "conv.i1";
			case 104:
				return "conv.i2";
			case 105:
				return "conv.i4";
			case 106:
				return "conv.i8";
			case 107:
				return "conv.r4";
			case 108:
				return "conv.r8";
			case 109:
				return "conv.u4";
			case 110:
				return "conv.u8";
			case 111:
				return "callvirt";
			case 112:
				return "cpobj";
			case 113:
				return "ldobj";
			case 114:
				return "ldstr";
			case 115:
				return "newobj";
			case 116:
				return "castclass";
			case 117:
				return "isinst";
			case 118:
				return "conv.r.un";
			case 121:
				return "unbox";
			case 122:
				return "throw";
			case 123:
				return "ldfld";
			case 124:
				return "ldflda";
			case 125:
				return "stfld";
			case 126:
				return "ldsfld";
			case 127:
				return "ldsflda";
			case 128:
				return "stsfld";
			case 129:
				return "stobj";
			case 130:
				return "conv.ovf.i1.un";
			case 131:
				return "conv.ovf.i2.un";
			case 132:
				return "conv.ovf.i4.un";
			case 133:
				return "conv.ovf.i8.un";
			case 134:
				return "conv.ovf.u1.un";
			case 135:
				return "conv.ovf.u2.un";
			case 136:
				return "conv.ovf.u4.un";
			case 137:
				return "conv.ovf.u8.un";
			case 138:
				return "conv.ovf.i.un";
			case 139:
				return "conv.ovf.u.un";
			case 140:
				return "box";
			case 141:
				return "newarr";
			case 142:
				return "ldlen";
			case 143:
				return "ldelema";
			case 144:
				return "ldelem.i1";
			case 145:
				return "ldelem.u1";
			case 146:
				return "ldelem.i2";
			case 147:
				return "ldelem.u2";
			case 148:
				return "ldelem.i4";
			case 149:
				return "ldelem.u4";
			case 150:
				return "ldelem.i8";
			case 151:
				return "ldelem.i";
			case 152:
				return "ldelem.r4";
			case 153:
				return "ldelem.r8";
			case 154:
				return "ldelem.ref";
			case 155:
				return "stelem.i";
			case 156:
				return "stelem.i1";
			case 157:
				return "stelem.i2";
			case 158:
				return "stelem.i4";
			case 159:
				return "stelem.i8";
			case 160:
				return "stelem.r4";
			case 161:
				return "stelem.r8";
			case 162:
				return "stelem.ref";
			case 163:
				return "ldelem.any";
			case 164:
				return "stelem.any";
			case 165:
				return "unbox.any";
			case 179:
				return "conv.ovf.i1";
			case 180:
				return "conv.ovf.u1";
			case 181:
				return "conv.ovf.i2";
			case 182:
				return "conv.ovf.u2";
			case 183:
				return "conv.ovf.i4";
			case 184:
				return "conv.ovf.u4";
			case 185:
				return "conv.ovf.i8";
			case 186:
				return "conv.ovf.u8";
			case 194:
				return "refanyval";
			case 195:
				return "ckfinite";
			case 198:
				return "mkrefany";
			case 208:
				return "ldtoken";
			case 209:
				return "conv.u2";
			case 210:
				return "conv.u1";
			case 211:
				return "conv.i";
			case 212:
				return "conv.ovf.i";
			case 213:
				return "conv.ovf.u";
			case 214:
				return "add.ovf";
			case 215:
				return "add.ovf.un";
			case 216:
				return "mul.ovf";
			case 217:
				return "mul.ovf.un";
			case 218:
				return "sub.ovf";
			case 219:
				return "sub.ovf.un";
			case 220:
				return "endfinally";
			case 221:
				return "leave";
			case 222:
				return "leave.s";
			case 223:
				return "stind.i";
			case 224:
				return "conv.u";
			case 248:
				return "prefix7";
			case 249:
				return "prefix6";
			case 250:
				return "prefix5";
			case 251:
				return "prefix4";
			case 252:
				return "prefix3";
			case 253:
				return "prefix2";
			case 254:
				return "prefix1";
			case 255:
				return "prefixref";
			}
			switch (code)
			{
			case 65024:
				return "arglist";
			case 65025:
				return "ceq";
			case 65026:
				return "cgt";
			case 65027:
				return "cgt.un";
			case 65028:
				return "clt";
			case 65029:
				return "clt.un";
			case 65030:
				return "ldftn";
			case 65031:
				return "ldvirtftn";
			case 65033:
				return "ldarg";
			case 65034:
				return "ldarga";
			case 65035:
				return "starg";
			case 65036:
				return "ldloc";
			case 65037:
				return "ldloca";
			case 65038:
				return "stloc";
			case 65039:
				return "localloc";
			case 65041:
				return "endfilter";
			case 65042:
				return "unaligned";
			case 65043:
				return "volatile";
			case 65044:
				return "tail";
			case 65045:
				return "initobj";
			case 65046:
				return "constrained";
			case 65047:
				return "cpblk";
			case 65048:
				return "initblk";
			case 65050:
				return "rethrow";
			case 65052:
				return "sizeof";
			case 65053:
				return "refanytype";
			case 65054:
				return "readonly";
			}
			throw new NotSupportedException(string.Format(CultureInfo.InvariantCulture, "Unknown IL instruction '{0}'.", new object[]
			{
				code.ToString("X4", CultureInfo.InvariantCulture)
			}));
		}

		private static Hashtable codes;
	}
}
